(()=>{"use strict";var n={426:(n,t,r)=>{r.d(t,{Z:()=>s});var e=r(537),o=r.n(e),a=r(645),i=r.n(a)()(o());i.push([n.id,":root {\n    --grid-color: rgb(141, 140, 140);\n    --text-color: rgb(110, 109, 109);\n}\n\n* {\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    background-color: rgb(228, 228, 253);\n}\n\nh1,\nh3 {\n    padding: 1rem;\n    color: var(--text-color);\n}\n\nh1,\n#instructions {\n    text-align: center;\n}\n\nbutton {\n    margin: 2rem;\n    margin-left: 3rem;\n    padding: 0.5rem 1rem;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n.square {\n    border: 1px solid var(--grid-color);\n    height: 2rem;\n    width: 2rem;\n    text-align: center;\n}\n\n.coords {\n    font-weight: 600;\n    color: var(--grid-color);\n}\n\n#instructions {\n    height: 1.5rem;\n}\n\n#board-n-menu {\n    display: flex;\n}\n\n#user-gameboard,\n#computer-gameboard {\n    margin: 2.5%;\n    width: 45%;\n}\n\n#boards-container {\n    display: flex;\n}\n\n#user-board,\n#computer-board {\n    display: grid;\n    grid-template-columns: repeat(11, 1fr);\n    grid-template-rows: repeat(11, 1fr);\n    width: 23rem;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,gCAAgC;IAChC,gCAAgC;AACpC;;AAEA;IACI,UAAU;IACV,SAAS;AACb;;AAEA;IACI,oCAAoC;AACxC;;AAEA;;IAEI,aAAa;IACb,wBAAwB;AAC5B;;AAEA;;IAEI,kBAAkB;AACtB;;AAEA;IACI,YAAY;IACZ,iBAAiB;IACjB,oBAAoB;AACxB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,mCAAmC;IACnC,YAAY;IACZ,WAAW;IACX,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;IAChB,wBAAwB;AAC5B;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,aAAa;AACjB;;AAEA;;IAEI,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;AAEA;;IAEI,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,YAAY;AAChB",sourcesContent:[":root {\n    --grid-color: rgb(141, 140, 140);\n    --text-color: rgb(110, 109, 109);\n}\n\n* {\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    background-color: rgb(228, 228, 253);\n}\n\nh1,\nh3 {\n    padding: 1rem;\n    color: var(--text-color);\n}\n\nh1,\n#instructions {\n    text-align: center;\n}\n\nbutton {\n    margin: 2rem;\n    margin-left: 3rem;\n    padding: 0.5rem 1rem;\n}\n\nbutton:hover {\n    cursor: pointer;\n}\n\n.square {\n    border: 1px solid var(--grid-color);\n    height: 2rem;\n    width: 2rem;\n    text-align: center;\n}\n\n.coords {\n    font-weight: 600;\n    color: var(--grid-color);\n}\n\n#instructions {\n    height: 1.5rem;\n}\n\n#board-n-menu {\n    display: flex;\n}\n\n#user-gameboard,\n#computer-gameboard {\n    margin: 2.5%;\n    width: 45%;\n}\n\n#boards-container {\n    display: flex;\n}\n\n#user-board,\n#computer-board {\n    display: grid;\n    grid-template-columns: repeat(11, 1fr);\n    grid-template-rows: repeat(11, 1fr);\n    width: 23rem;\n}"],sourceRoot:""}]);const s=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var r="",e=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),e&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=n(t),e&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(n,r,e,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(e)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);e&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),r&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=r):A[2]=r),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),t.push(A))}},t}},537:n=>{n.exports=function(n){var t=n[1],r=n[3];if(!r)return t;if("function"==typeof btoa){var e=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e),a="/*# ".concat(o," */"),i=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function r(n){for(var r=-1,e=0;e<t.length;e++)if(t[e].identifier===n){r=e;break}return r}function e(n,e){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],l=e.base?c[0]+e.base:c[0],A=a[l]||0,u="".concat(l," ").concat(A);a[l]=A+1;var d=r(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(h);else{var f=o(h,e);e.byIndex=s,t.splice(s,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function o(n,t){var r=t.domAPI(t);return r.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;r.update(n=t)}else r.remove()}}n.exports=function(n,o){var a=e(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=r(a[i]);t[s].references--}for(var c=e(n,o),l=0;l<a.length;l++){var A=r(a[l]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}a=c}}},569:n=>{var t={};n.exports=function(n,r){var e=function(n){if(void 0===t[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}t[n]=r}return t[n]}(n);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(r)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,r)=>{n.exports=function(n){var t=r.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(r){!function(n,t,r){var e="";r.supports&&(e+="@supports (".concat(r.supports,") {")),r.media&&(e+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(e+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),e+=r.css,o&&(e+="}"),r.media&&(e+="}"),r.supports&&(e+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(e,n,t.options)}(t,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function r(e){var o=t[e];if(void 0!==o)return o.exports;var a=t[e]={id:e,exports:{}};return n[e](a,a.exports,r),a.exports}r.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return r.d(t,{a:t}),t},r.d=(n,t)=>{for(var e in t)r.o(t,e)&&!r.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},r.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n=r(379),t=r.n(n),e=r(795),o=r.n(e),a=r(569),i=r.n(a),s=r(565),c=r.n(s),l=r(216),A=r.n(l),u=r(589),d=r.n(u),h=r(426),f={};function p(){return{chosenCoords:[],attack:function(){let n=function(){const n="ABCDEFGHIJ",t=["1","2","3","4","5","6","7","8","9","10"];return n.charAt(Math.floor(Math.random()*n.length))+t[Math.floor(Math.random()*t.length)]}();if(-1!==this.chosenCoords.indexOf(n))return this.chosenCoords.push(n),n;this.attack()}}}function m(n){let t=[];const r="ABCDEFGHIJ",e=r.charAt(Math.floor(Math.random()*r.length));let o=0;for(;0===o;)5===n?o=Math.floor(7*Math.random()):4===n?o=Math.floor(8*Math.random()):3===n?o=Math.floor(9*Math.random()):2===n&&(o=Math.floor(10*Math.random()));for(let r=0;r<n;r++){let n=e+o;t.push(n),o++}return t}function g(n){let t=[];const r="ABCDEFGHIJ";let e;5===n?e=r.charAt(Math.floor(5*Math.random())):4===n?e=r.charAt(Math.floor(6*Math.random())):3===n?e=r.charAt(Math.floor(7*Math.random())):2===n&&(e=r.charAt(Math.floor(8*Math.random())));let o=0;for(;0===o;)o=Math.floor(11*Math.random());const a=r.slice(r.indexOf(e),r.indexOf(e)+n);for(let n=0;n<a.length;n++){let r=a.charAt(n)+o;t.push(r)}return t}function C(){return Math.floor(2*Math.random())}function v(n){let t=function(){const n=[5,4,3,3,2];let t=[];0===C()?t.push(m(n[0])):t.push(g(n[0]));for(let r=1;r<5;r++){let e;if(0===C()){let o=!0;for(;!0===o;){e=m(n[r]);n:for(let n=0;n<e.length;n++)for(let n=0;n<t.length;n++)for(let r=0;r<t[n].length;r++){if(-1!==t[n].indexOf(e[r])){o=!0;break n}o=!1}t.push(e),o=!1}}else{let e,o=!0;for(;!0===o;){e=g(n[r]);n:for(let n=0;n<e.length;n++)for(let n=0;n<t.length;n++)for(let r=0;r<t[n].length;r++){if(-1!==t[n].indexOf(e[r])){o=!0;break n}o=!1}}t.push(e),o=!1}}return t}(),r=[5,4,3,3,2];for(let e=0;e<5;e++)n.placeShip(r[e],t[e]);return t}function b(n){for(let t=0;t<n.length;t++)n[t].forEach((n=>{document.getElementsByClassName(`square user ${n}`)[0].style.backgroundColor="#483d8b"}))}f.styleTagTransform=d(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=A(),t()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals,p(),p();const I={ships:[],missedAttacks:[],placeShip:function(n,t){return this.ships.push({length:n,coords:t,hit:function(n){const t=this.coords.indexOf(n);return this.coords[t]="x",this.coords},isSunk:function(){return this.coords.filter((n=>"x"===n)).length===this.length}}),this.ships},receiveAttack:function(n){for(let t in this.ships){if(-1!==this.ships[t].coords.indexOf(n)){let r=this.ships[t].coords.indexOf(n);return this.ships[t].coords[r]="x"}this.missedAttacks.push(n)}},checkGameOver:function(){for(let n in this.ships)return!0===this.ships[n].coords.every((n=>"x"===n))}};var y;y=I,document.getElementById("reset-button").addEventListener("click",(()=>{document.querySelectorAll(".user").forEach((n=>{n.style.backgroundColor=""})),y.ships=[],b(v(y)),console.log(y.ships)})),b(v(I))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,